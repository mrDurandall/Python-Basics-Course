# Задание 3
# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки
# должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если
# разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется
# как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется
# как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса
# и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек
# между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает,
# то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.


class Cell:

    def __init__(self, partition):
        if type(partition) is not int:
            raise TypeError
        self.partition = partition

    def __str__(self):
        return str(self.partition)

    def __add__(self, other):
        if type(other) != Cell:
            print('Ошибка! Клетку можно сложить только с другой клеткой!')
            raise TypeError
        else:
            return Cell(self.partition + other.partition)

    def __sub__(self, other):
        if type(other) != Cell:
            print('Ошибка! Клетку можно вычесть только из другой клетки!')
            raise TypeError
        elif other.partition > self.partition:
            print('Ошибка! Невозможно вычесть из меньшей клетки большую!')
            raise ValueError
        else:
            return Cell(self.partition - other.partition)

    def __mul__(self, other):
        return Cell(self.partition * other.partition)

    def __truediv__(self, other):
        return Cell(self.partition // other.partition)

    def make_order(self, par_in_row):
        res = ''
        for i in range(1, self.partition + 1):
            res += '*'
            if i % par_in_row == 0:
                res += '\n'
        return res


c1 = Cell(21)
c2 = Cell(7)
print(c1 + c2)
print(c1 - c2)
print(c1 * c2)
print(c1 / c2)
print(c1.make_order(5))
